{"version":3,"sources":["webpack:///./src/pages/sketches/partials.js","webpack:///./src/components/Player.js","webpack:///./src/helpers/svg.helpers.js","webpack:///./src/components/Sketch.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_Sketch__WEBPACK_IMPORTED_MODULE_1__","_components_Player__WEBPACK_IMPORTED_MODULE_2__","_helpers_svg_helpers__WEBPACK_IMPORTED_MODULE_3__","TWO_PI","Math","PI","getSinusoidPoints","amplitude","frequency","phase","sampleRate","sine","x","sin","getSine","min","max","delta","samples","i","sample","push","getEvenlyDistributedSamples","map","y","denormalize","width","height","point","flipAxes","getSinusoidPath","_ref","color","sinusoidPoints","d","toSvg","strokeWidth","a","createElement","key","stroke","strokeLinecap","fill","Sines","props","t","size","window","innerWidth","innerHeight","paths","getNormalizedSine","pow","path","style","overflow","Demo","speed","progress","About","className","demo","about","Player","_this","_React$Component","call","this","state","lastTickAt","tick","bind","_babel_runtime_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1___default","componentDidMount","start","setState","Date","_this2","requestAnimationFrameId","requestAnimationFrame","_this2$state","now","updatedProgress","then","secondsBetween","render","children","React","Component","points","_ref2","svg","length","display","justifyContent","alignItems","backgroundColor"],"mappings":"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","file":"component---src-pages-sketches-partials-js-a959c634e18168ba08f6.js","sourcesContent":["import React from 'react'\nimport Sketch from '../../components/Sketch'\nimport Player from '../../components/Player'\nimport { toSvg } from '../../helpers/svg.helpers'\n\nconst getEvenlyDistributedSamples = (min, max, n) => {\n  const distance = max - min\n  const delta = distance / n\n  const samples = []\n  for (let i = 0; i < n; i++) {\n    const sample = min + i * delta\n    samples.push(sample)\n  }\n  return samples\n}\n\nconst TWO_PI = 2 * Math.PI\n\n// Sine wave that ranges from 0 to 1, inclusive, with a period of 0 to 1\nconst getNormalizedSine = amplitude => frequency => phase => x =>\n  (Math.sin(frequency * TWO_PI * x + phase) + 1) / 2 * amplitude\n\nconst getSine = amplitude => frequency => phase => x =>\n  Math.sin(frequency * TWO_PI * x + phase) * amplitude\n\nconst getSinusoidPoints = (\n  amplitude = 1,\n  frequency = 1,\n  phase = 0,\n  sampleRate = 100\n) => {\n  const sine = getSine(amplitude)(frequency)(phase)\n  const xs = getEvenlyDistributedSamples(0, 1, sampleRate)\n  const points = xs.map(x => {\n    const y = sine(x)\n    return { x, y }\n  })\n  return points\n}\n\nconst denormalize = (width, height) => point => {\n  const xMidpoint = width / 2\n  const yMidpoint = height / 2\n  return {\n    x: xMidpoint + point.x * (width / 2),\n    y: point.y * height\n  }\n}\n\nconst normalizedRgba = (\n  normalizedRed,\n  normalizedGreen,\n  normalizedBlue,\n  normalizedAlpha\n) => {\n  const r = normalizedRed * 255\n  const g = normalizedGreen * 255\n  const b = normalizedBlue * 255\n  const a = normalizedAlpha\n  return `rgba(${r}, ${g}, ${b}, ${a})`\n}\n\nconst vh = x => x + 'vh'\nconst percent = x => x + '%'\nconst flipAxes = point => ({ x: point.y, y: point.x })\n\nconst getSinusoidPath = ({\n  i,\n  frequency,\n  amplitude,\n  phase,\n  color,\n  width,\n  height\n}) => {\n  const strokeLinecap = 'butt'\n  const sinusoidPoints = getSinusoidPoints(amplitude, frequency, phase, 1000)\n    .map(flipAxes)\n    .map(denormalize(width, height))\n  const d = toSvg(sinusoidPoints)\n  const strokeWidth = amplitude + 0.25\n  return (\n    <path\n      d={d}\n      key={i}\n      stroke={color}\n      strokeWidth={strokeWidth}\n      strokeLinecap={strokeLinecap}\n      fill='none'\n    />\n  )\n}\n\nconst toString = ({ x, y }) => '(' + x + ', ' + y + ')'\n\nconst getLinePath = ({ start, end, color, width, height }) => {\n  const strokeLinecap = 'butt'\n  const points = [start, end].map(flipAxes).map(denormalize(width, height))\n  const d = toSvg(points)\n  const strokeWidth = 1\n  const key = toString(start) + ' - ' + toString(end)\n  return (\n    <path\n      d={d}\n      key={key}\n      stroke={color}\n      strokeWidth={strokeWidth}\n      strokeLinecap={strokeLinecap}\n      fill='none'\n    />\n  )\n}\n\nconst Sines = props => {\n  const t = props.t || 0\n  const size = Math.min(window.innerWidth, window.innerHeight)\n  const width = size\n  const height = size\n\n  const cx = width / 2\n  const cy = height / 2\n  const r = 50\n\n  const paths = []\n  const alphaSine = getNormalizedSine(1)(2)(0)\n  const partials = 32\n  for (let i = 0; i < partials; i++) {\n    const normalizedIndex = i / partials\n    // const alpha = 1 - normalizedIndex\n    // const oscillatingAlpha = alphaSine(alpha + t)\n    // const color = normalizedRgba(1, 1, 1, oscillatingAlpha)\n    const color = normalizedRgba(1, 1, 1, 1)\n    const frequency = 2 ** i\n    // const frequency = 1.01 ** i\n    // const frequency = 0.9 ** i\n    const amplitude = 1 / frequency\n    // const amplitude = 1\n    const path = getSinusoidPath({\n      i,\n      frequency,\n      amplitude,\n      phase: t,\n      // phase: 0,\n      color,\n      width,\n      height\n    })\n    paths.push(path)\n  }\n\n  // paths.push(\n  //   getLinePath({\n  //     start: { x: 0, y: 1 },\n  //     end: { x: 0.1, y: 1 },\n  //     color: 'white',\n  //     width,\n  //     height\n  //   })\n  // )\n\n  return (\n    <svg width={width} height={height} style={{ overflow: 'visible' }}>\n      {paths}\n    </svg>\n  )\n}\n\nconst Demo = () => (\n  <Player speed={-1}>{progress => <Sines t={progress} />}</Player>\n)\n// <Sines offset={0} />\n\nconst About = () => (\n  <p className='major'>\n    I'm a musician and programmer. I co-founded\n  </p>\n)\n\nexport default () => {\n  return <Sketch demo={<Demo />} about={<About />} />\n}\n","import React from 'react'\n\nconst secondsBetween = (now, then) => (now - then) / 1000\n\nexport default class Player extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      progress: 0,\n      lastTickAt: null\n    }\n    this.tick = this.tick.bind(this)\n  }\n  componentDidMount () {\n    this.start()\n  }\n  start () {\n    this.setState({ lastTickAt: new Date() }, this.tick)\n  }\n  tick () {\n    this.requestAnimationFrameId = window.requestAnimationFrame(() => {\n      const { lastTickAt, progress } = this.state\n      const now = new Date()\n      const secondsSinceLastTick =\n        secondsBetween(now, lastTickAt) * this.props.speed\n      const updatedProgress = progress + secondsSinceLastTick\n      this.setState({ lastTickAt: now, progress: updatedProgress }, this.tick)\n    })\n  }\n  render () {\n    return this.props.children(this.state.progress)\n  }\n}\n","const moveTo = ({ x, y }) => `M ${x},${y} `\nconst lineTo = ({ x, y }) => `L ${x},${y}`\n\nexport const toSvg = points => {\n  let svg = moveTo(points[0])\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i]\n    svg = svg + ' ' + lineTo(point)\n  }\n  return svg\n}\n","import React from 'react'\n\nexport default props => {\n  if (typeof window === 'undefined') {\n    return null\n  }\n  return (\n    <div\n      style={{\n        width: '100vw',\n        height: '100vh',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: props.backgroundColor || 'black'\n      }}\n    >\n      {props.demo}\n    </div>\n  )\n}\n"],"sourceRoot":""}